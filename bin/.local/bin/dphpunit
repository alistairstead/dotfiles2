#!/bin/bash

set -e # Exit on error

ARGS=("$@")
containerName=${APP_SERVICE:-"app-test"}            # Default if not set
composeFile=${COMPOSE_FILE:-"compose.yml"}          # Default compose file
composeService=${COMPOSE_SERVICE:-"$containerName"} # Default to container name
autoShutdown=${AUTO_SHUTDOWN:-"true"}               # Whether to shut down container after tests

# detect local path and remove from args
projectPath="$(git rev-parse --show-toplevel)"
localPhpUnitResultPath="$projectPath/phpunit-result.xml"

# Find compose file if not explicitly set
if [ ! -f "$composeFile" ] && [ -f "$projectPath/docker-compose.yml" ]; then
  composeFile="$projectPath/docker-compose.yml"
elif [ ! -f "$composeFile" ] && [ -f "$projectPath/compose.yml" ]; then
  composeFile="$projectPath/compose.yml"
fi

subPath=$(awk -F '/vendor/' '{print $1}' <<<"$projectPath")

## detect test result output
outputPath=""
for i in "${ARGS[@]}"; do
  case $i in
  --log-junit=*)
    outputPath="${i#*=}"
    ;;
  *) ;;
  esac
done

# Filter out the --log-junit parameter
filtereCommand=()
for arg in "${ARGS[@]}"; do
  if [[ ! "$arg" =~ ^--log-junit= ]]; then
    filtereCommand+=("$arg")
  fi
done

command="${filtereCommand[*]}"

# If no output path specified, use a default
if [ -z "$outputPath" ]; then
  outputPath="$localPhpUnitResultPath"
fi

# replace with local paths
command="${command/$subPath\//}"
command="${command//(*/}"
# Replace dphpunit with ./vendor/bin/phpunit, including when it has a path prefix
command=$(echo "$command" | sed -E 's|(/[^[:space:]"'\'']*/)?(dphpunit)|./vendor/bin/phpunit|g')
command="./vendor/bin/phpunit ${command} --log-junit=${localPhpUnitResultPath}"

# Check if container is running
container=$(docker ps --filter "name=${containerName}" --format="{{.ID}}")

# Start container if not running
containerStarted=false
if [ -z "$container" ]; then
  gum log --level info "Container '$containerName' not running. Starting with Docker Compose..."

  if [ ! -f "$composeFile" ]; then
    gum log --level fatal "Docker Compose file not found at $composeFile"
    exit 1
  fi

  # Navigate to the directory containing the compose file
  composeDir=$(dirname "$composeFile")
  pushd "$composeDir" >/dev/null || exit
  # Start the container
  gum spin --spinner dot --title "Starting container..." -- \
    docker compose -f "$(basename "$composeFile")" up --scale "$composeService"=1 -d "$composeService"
  popd >/dev/null || exit

  # Get the container ID now that it's running
  container=$(docker ps --filter "name=${containerName}" --format="{{.ID}}")

  if [ -z "$container" ]; then
    gum log --level fatal "Failed to start container '$containerName'"
    exit 1
  else
    containerStarted=true
  fi
  clear
fi

# Get shell and working directory
execPath=$(docker exec "$container" /bin/bash -c "if [ -f /bin/bash ]; then echo /bin/bash; else echo /bin/sh; fi" | tr -d '\r')
dockerPath=$(docker inspect --format "{{.Config.WorkingDir}}" "$container")

# Run the tests
testExitCode=0
docker exec "$container" "$execPath" -c "$command" || testExitCode=$?

# copy results
if output=$(docker cp "$container:$localPhpUnitResultPath" "$outputPath" 2>&1); then
  gum log --level info "Success: copied test results from container"
else
  gum log --level warn --structured "Failed to copy test results from container." output "$output"
fi

# replace docker path to locals in results file
if [ -f "$outputPath" ]; then
  # Count replacements (GNU sed specific)
  replacements=$(sed -i "s#$dockerPath#$projectPath#g" "$outputPath" 2>/dev/null || echo "ERROR")

  if [ "$replacements" != "ERROR" ]; then
    gum log --level info --structured "Path replacement completed in '$outputPath'" from "$dockerPath" to "$projectPath"
  else
    gum log --level error "Failed to replace paths in '$outputPath'"
  fi
else
  gum log --level warn "Output file '$outputPath' not found"
fi

# Shut down container if we started it and auto-shutdown is enabled
if [ "$containerStarted" = true ] && [ "$autoShutdown" = "true" ]; then
  composeDir=$(dirname "$composeFile")
  pushd "$composeDir" >/dev/null || exit
  gum spin --spinner dot --title "Shutting down container..." -- \
    docker-compose -f "$(basename "$composeFile")" down "$composeService"
  popd >/dev/null || exit
  clear
fi

# Exit with the test exit code
exit $testExitCode
