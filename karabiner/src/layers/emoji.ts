import { duoLayer, map, toKey, toPaste, withMapper } from 'karabiner.ts'
import { toRaycastExt$ } from './raycast'

export function emojiLayer() {
  // See https://gitmoji.dev/
  let emojiMap = {
    b: 'üêõ', // Fix a bug
    c: 'üîß', // add or update Configuration files
    d: 'üìù', // add or update Documentation
    f: 'üö©', // add, update, or remove Feature Flags
    h: 'üíØ', // _hundred
    j: 'üòÇ', // _joy
    m: 'üîÄ', // Merge branches
    n: '‚ú®', // introduce New features
    p: 'üëç', // _plus_one +1
    r: '‚ôªÔ∏è', // Refactor code
    s: 'üòÖ', // _sweat_smile
    u: '‚¨ÜÔ∏è', // Upgrade dependencies
    v: 'üîñ', // release / Version tags

    t: 'üõ†Ô∏è', // Tools
    k: 'üìö', // Knowledge learnt
    o: 'üí≠', // Opinions and thoughts
    i: 'üë®‚Äçüíª', // Experiences and stories
  }

  let emojiHint = Object.entries(emojiMap)
    .slice(0, 15)
    .reduce(
      (r, [k, v]) => [r[0].concat(v), r[1].concat(k.toUpperCase())],
      [[] as string[], [] as string[]],
    )
    .map((v, i) => v.join(i === 0 ? ' ' : '    '))
    .join('\n')

  return [
    duoLayer('z', 'x')
      .notification(emojiHint)
      .manipulators([
        map(';').to(
          toRaycastExt$('raycast/emoji-symbols/search-emoji-symbols'),
        ),

        withMapper(emojiMap)((k, v) => map(k).toPaste(v)),

        { 2: toPaste('‚å´'), 3: toPaste('‚å¶'), 4: toPaste('‚á•'), 5: toPaste('‚éã') },
        { 6: toPaste('‚åò'), 7: toPaste('‚å•'), 8: toPaste('‚åÉ'), 9: toPaste('‚áß') },
        { 0: toPaste('‚á™'), ',': toPaste('‚Äπ'), '.': toPaste('‚Ä∫') },

        withMapper(['‚Üê', '‚Üí', '‚Üë', '‚Üì', '‚ê£', '‚èé', '‚å´', '‚å¶'])((k) =>
          map(k).toPaste(k),
        ),

        // Code snippets
        map('l').toTypeSequence('console.log()‚Üê'),
        map("'").toTypeSequence('‚å´"'),
        map('[').toTypeSequence('[‚ê£]‚ê£'),
        map(']').toTypeSequence('-‚ê£[‚ê£]‚ê£'),

        { "'": toKey('‚å´'), '\\': toKey('‚å¶') },
      ]),
  ]
}
