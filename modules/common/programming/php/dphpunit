#!/bin/bash

set -e # Exit on error

# Determine if stdout is a terminal...
if test -t 1; then
  # Determine if colors are supported...
  ncolors=$(tput colors)

  if test -n "$ncolors" && test "$ncolors" -ge 8; then
    BOLD="$(tput bold)"
    RED="$(tput setaf 1)"
    YELLOW="$(tput setaf 3)"
    GREEN="$(tput setaf 2)"
    NC="$(tput sgr0)"
  fi
fi

ARGS=("$@")
containerName=${APP_SERVICE:-"app-test"}            # Default if not set
composeFile=${COMPOSE_FILE:-"compose.yml"}          # Default compose file
composeService=${COMPOSE_SERVICE:-"$containerName"} # Default to container name
autoShutdown=${AUTO_SHUTDOWN:-"true"}               # Whether to shut down container after tests

# detect local path and remove from args
projectPath="$(git rev-parse --show-toplevel)"
localPhpUnitResultPath="$projectPath/phpunit-result.xml"

# Find compose file if not explicitly set
if [ ! -f "$composeFile" ] && [ -f "$projectPath/docker-compose.yml" ]; then
  composeFile="$projectPath/docker-compose.yml"
elif [ ! -f "$composeFile" ] && [ -f "$projectPath/compose.yml" ]; then
  composeFile="$projectPath/compose.yml"
fi

subPath=$(awk -F '/vendor/' '{print $1}' <<<"$projectPath")

## detect test result output
outputPath=""
for i in "${ARGS[@]}"; do
  case $i in
  --log-junit=*)
    outputPath="${i#*=}"
    ;;
  *) ;;
  esac
done

# Filter out the --log-junit parameter
filtereCommand=()
for arg in "${ARGS[@]}"; do
  if [[ ! "$arg" =~ ^--log-junit= ]]; then
    filtereCommand+=("$arg")
  fi
done

command="${filtereCommand[*]}"

# If no output path specified, use a default
if [ -z "$outputPath" ]; then
  outputPath="$localPhpUnitResultPath"
fi

# replace with local paths
command="${command/$subPath\//}"
command="${command//(*/}"
# Replace dphpunit with ./vendor/bin/phpunit, including when it has a path prefix
command=$(echo "$command" | sed -E 's|(/[^[:space:]"'\'']*/)?(dphpunit)|./vendor/bin/phpunit|g')
command="./vendor/bin/phpunit ${command} --log-junit=${localPhpUnitResultPath}"

# Check if container is running
container=$(docker ps --filter "name=${containerName}" --format="{{.ID}}")

# Start container if not running
containerStarted=false
if [ -z "$container" ]; then
  echo "Container '$containerName' not running. Starting with Docker Compose..."

  if [ ! -f "$composeFile" ]; then
    echo "Error: Docker Compose file not found at $composeFile" >&2
    exit 1
  fi

  # Navigate to the directory containing the compose file
  composeDir=$(dirname "$composeFile")
  pushd "$composeDir" >/dev/null || exit

  # Start the container
  docker compose -f "$(basename "$composeFile")" up --scale "$composeService"=1 -d "$composeService"

  # Mark that we started the container
  containerStarted=true

  # Return to original directory
  popd >/dev/null || exit

  # Get the container ID now that it's running
  container=$(docker ps --filter "name=${containerName}" --format="{{.ID}}")

  if [ -z "$container" ]; then
    echo "Error: Failed to start container '$containerName'" >&2
    exit 1
  fi

  # Give container a moment to fully initialize
  echo "Waiting for container to initialize..."
  for i in {1..5}; do
    if docker exec "$container" "$execPath" -c "echo 'ready'" >/dev/null 2>&1; then
      break
    fi
    sleep 1
  done
  clear
fi

# Get shell and working directory
execPath=$(docker exec "$container" /bin/bash -c "if [ -f /bin/bash ]; then echo /bin/bash; else echo /bin/sh; fi" | tr -d '\r')
dockerPath=$(docker inspect --format "{{.Config.WorkingDir}}" "$container")

## debug
echo "🐳 Using container: $containerName"
echo "📄 Compose file: $composeFile"
echo "🔧 Service: $composeService"
echo "   Local:    $projectPath"
echo "   Result:   $outputPath"
echo "   OutPath:  $outputPath"
echo "  Args: $*"
echo "🚀 Executing in container: $command"

# Run the tests
testExitCode=0
docker exec "$container" "$execPath" -c "$command" || testExitCode=$?

# copy results
if output=$(docker cp "$container:$localPhpUnitResultPath" "$outputPath" 2>&1); then
  echo -e "${GREEN}Successfully copied test results from container${NC}"
  echo -e "${GREEN}$output${NC}"
else
  echo -e "${RED}Warning: Failed to copy test results from container${NC}" >&2
  echo -e "${RED}$output${NC}" >&2
fi

# replace docker path to locals in results file
if [ -f "$outputPath" ]; then
  sed -i "s#$dockerPath#$projectPath#g" "$outputPath"
else
  echo "Warning: Output file '$outputPath' not found" >&2
fi

# Shut down container if we started it and auto-shutdown is enabled
if [ "$containerStarted" = true ] && [ "$autoShutdown" = "true" ]; then
  echo "Shutting down container..."
  composeDir=$(dirname "$composeFile")
  pushd "$composeDir" >/dev/null || exit
  docker-compose -f "$(basename "$composeFile")" down "$composeService"
  popd >/dev/null || exit
fi

# Exit with the test exit code
exit $testExitCode
