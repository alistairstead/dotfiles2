#!/bin/bash

# Determine if stdout is a terminal...
if test -t 1; then
  # Determine if colors are supported...
  ncolors=$(tput colors)

  if test -n "$ncolors" && test "$ncolors" -ge 8; then
    BOLD="$(tput bold)"
    YELLOW="$(tput setaf 3)"
    GREEN="$(tput setaf 2)"
    NC="$(tput sgr0)"
  fi
fi

# Function that prints the available commands...
function display_help {
  echo "Help"

  exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
  if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
    display_help
  fi
else
  display_help
fi

# Define environment variables...
export APP_SERVICE=${APP_SERVICE:-"php"}
export XDEBUG_CONFIG=${XDEBUG_CONFIG:-""} # Default if not set

DOCKER_COMPOSE=(docker compose)

ARGS=()

# Proxy PHP commands to the "php" binary on the application container...
if [ "$1" == "php" ]; then
  shift 1

  ARGS+=(exec)
  [ ! -t 0 ] && ARGS+=(-T)
  ARGS+=("$APP_SERVICE" "php")

# Proxy the "debug" command to the "php artisan" binary on the application container with xdebug enabled...
elif [ "$1" == "debug" ]; then
  shift 1

  ARGS+=(exec -e XDEBUG_TRIGGER=1 -e XDEBUG_CONFIG)
  [ ! -t 0 ] && ARGS+=(-T)
  ARGS+=("$APP_SERVICE" php)

# Proxy the "phpunit" command to "php vendor/bin/phpunit"...
elif [ "$1" == "phpunit" ]; then
  shift 1

  ARGS+=(exec)
  [ ! -t 0 ] && ARGS+=(-T)
  ARGS+=("$APP_SERVICE" php vendor/bin/phpunit)

fi

# Check if container is running
container=$(docker ps --filter "name=${APP_SERVICE}" --format="{{.ID}}")
dockerPath=$(docker inspect --format "{{.Config.WorkingDir}}" "$container")
localPhpUnitResultPath='/tmp/phpunit-result.xml'
projectPath="$(git rev-parse --show-toplevel)"
subPath=$(awk -F '/vendor/' '{print $1}' <<<"$projectPath")

command="$*"

## detect test result output
outputPath=""
for i in $command; do
  case $i in
  --log-junit=*)
    outputPath="${i#*=}"
    ;;
  *) ;;
  esac
done

# If no output path specified, use a default
if [ -z "$outputPath" ]; then
  outputPath="$projectPath/phpunit-result.xml"
fi

# replace with local paths
command="${command/$subPath\//}"
command="${command//(*/}"
# Replace dphpunit with ./vendor/bin/phpunit, including when it has a path prefix
command=$(echo "$command" | sed -E 's|(/[^[:space:]"'\'']*/)?(dprox phpunit)|./vendor/bin/phpunit|g')

echo "ðŸš€ Executing in container: docker compose ${ARGS[*]} ${command}"

testExitCode=0
# Run Docker Compose with the defined arguments...
"${DOCKER_COMPOSE[@]}" "${ARGS[@]}" "${command} --log-junit=${localPhpUnitResultPath}" || testExitCode=$?

# copy results
echo "Copying test results..."
docker cp "$container:$localPhpUnitResultPath" "$outputPath" || {
  echo "Warning: Failed to copy test results from container" >&2
}

# replace docker path to locals in results file
if [ -f "$outputPath" ]; then
  sed -i "s#$dockerPath#$projectPath#g" "$outputPath"
else
  echo "Warning: Output file '$outputPath' not found" >&2
fi

# Exit with the test exit code
exit $testExitCode
