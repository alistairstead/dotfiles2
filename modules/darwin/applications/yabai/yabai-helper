#! /bin/bash

set +o errexit
set +o nounset
set +o pipefail

toggle_layout() {
  LAYOUT=$(yabai -m query --spaces --space | jq .type)

  if [[ $LAYOUT =~ "bsp" ]]; then
    yabai -m space --layout stack
  elif [[ $LAYOUT =~ "stack" ]]; then
    yabai -m space --layout float
  elif [[ $LAYOUT =~ "float" ]]; then
    yabai -m space --layout bsp
  fi
}

opacity_up() {
  OPACITY=$(yabai -m query --windows --window | jq .opacity)
  if [ "$(echo "$OPACITY == 1.0" | bc -l)" -eq 1 ]; then
    yabai -m window --opacity 0.1
  else
    OPACITY=$(echo "$OPACITY" + 0.1 | bc)
    yabai -m window --opacity "$OPACITY"
  fi
}

opacity_down() {
  OPACITY=$(yabai -m query --windows --window | jq .opacity)
  if [ "$(echo "$OPACITY == 0.1" | bc -l)" -eq 1 ]; then
    yabai -m window --opacity 1.0
  else
    OPACITY=$(echo "$OPACITY" - 0.1 | bc)
    yabai -m window --opacity "$OPACITY"
  fi
}

toggle_border() {
  BORDER=$(yabai -m config window_border)
  if [[ $BORDER = "on" ]]; then
    yabai -m config window_border off
  elif [[ $BORDER = "off" ]]; then
    yabai -m config window_border on
  fi
  yabai -m config window_border
}

increase_gaps() {
  GAP=$(yabai -m config window_gap)
  yabai -m config window_gap $(echo "$GAP" + 1 | bc)
}

decrease_gaps() {
  GAP=$(yabai -m config window_gap)
  yabai -m config window_gap $(echo "$GAP" - 1 | bc)
}

increase_padding_top() {
  PADDING=$(yabai -m config top_padding)
  yabai -m config top_padding $(echo "$PADDING" + 1 | bc)
}

increase_padding_bottom() {
  PADDING=$(yabai -m config bottom_padding)
  yabai -m config bottom_padding $(echo "$PADDING" + 1 | bc)
}

increase_padding_left() {
  PADDING=$(yabai -m config left_padding)
  yabai -m config left_padding $(echo "$PADDING" + 1 | bc)
}

increase_padding_right() {
  PADDING=$(yabai -m config right_padding)
  yabai -m config right_padding $(echo "$PADDING" + 1 | bc)
}

increase_padding_all() {
  PADDING_TOP=$(yabai -m config top_padding)
  PADDING_BOTTOM=$(yabai -m config bottom_padding)
  PADDING_LEFT=$(yabai -m config left_padding)
  PADDING_RIGHT=$(yabai -m config right_padding)
  WINDOW_GAP=$(yabai -m config window_gap)

  yabai -m config top_padding $(echo "$PADDING"_TOP + 10 | bc)
  yabai -m config bottom_padding $(echo "$PADDING"_BOTTOM + 10 | bc)
  yabai -m config left_padding $(echo "$PADDING"_LEFT + 10 | bc)
  yabai -m config right_padding $(echo "$PADDING"_RIGHT + 10 | bc)
  yabai -m config window_gap $(echo "$window"_GAP + 10 | bc)
}

decrease_padding_top() {
  PADDING=$(yabai -m config top_padding)
  yabai -m config top_padding $(echo "$PADDING" - 1 | bc)
}

decrease_padding_bottom() {
  PADDING=$(yabai -m config bottom_padding)
  yabai -m config bottom_padding $(echo "$PADDING" - 1 | bc)
}

decrease_padding_left() {
  PADDING=$(yabai -m config left_padding)
  yabai -m config left_padding $(echo "$PADDING" - 1 | bc)
}

decrease_padding_right() {
  PADDING=$(yabai -m config right_padding)
  yabai -m config right_padding $(echo "$PADDING" - 1 | bc)
}

decrease_padding_all() {
  PADDING_TOP=$(yabai -m config top_padding)
  PADDING_BOTTOM=$(yabai -m config bottom_padding)
  PADDING_LEFT=$(yabai -m config left_padding)
  PADDING_RIGHT=$(yabai -m config right_padding)
  WINDOW_GAP=$(yabai -m config window_gap)

  yabai -m config top_padding $(echo "$PADDING"_TOP - 10 | bc)
  yabai -m config bottom_padding $(echo "$PADDING"_BOTTOM - 10 | bc)
  yabai -m config left_padding $(echo "$PADDING"_LEFT - 10 | bc)
  yabai -m config right_padding $(echo "$PADDING"_RIGHT - 10 | bc)
  yabai -m config window_gap $(echo "$window"_GAP - 10 | bc)
}

create_spaces() {
  CURRENT_SPACES=$(yabai -m query --spaces | jq -r '[.[]."is-native-fullscreen"| select(.==false) ]| length')
  CURRENT_SPACE=$(yabai -m query --spaces --space | jq -r ."index")
  NEEDED_SPACES=$1

  if [[ $1 == "a" ]]; then
    yabai -m space --create
    yabai -m space last --label "$2"
    if [ -n "$yabai_WINDOW_ID" ]; then
      yabai -m window "$YABAI_WINDOW_ID" --space "$2"
    fi
    yabai -m space --focus "$2"
    return 0
  fi

  if [[ "$CURRENT_SPACES" -ge "$NEEDED_SPACES" ]]; then
    return
  fi
  SPACES_TO_CREATE=$(("$NEEDED_SPACES" - "$CURRENT_SPACES"))

  for i in $(seq $((1 + CURRENT_SPACES)) "$NEEDED_SPACES"); do
    echo "$i"
    yabai -m space --create
    yabai -m space --focus "$i"
  done
  yabai -m space "$CURRENT_SPACE" --focus

}

cycle_windows() {
  reverse=""
  if [[ $1 != "--reverse" ]]; then
    reverse="| reverse"
  else
    reverse=""
  fi
  yabai -m query --windows --space | jq -re '
    map(select((."is-minimized" != true) and ."can-move" == true))
    | sort_by(.frame.x, .frame.y, ."stack-index", .id)
    '"$reverse"'
    | first as $first
    | map( $first.id, .id )
    | .[]' |
    tail -n +3 |
    xargs -n2 sh -c 'echo $1 $2; yabai -m window $1 --swap $2' sh
}

float_reset() {
  ids=($(yabai -m query --windows --space | jq -re '.[].id'))

  for window in $ids; do
    top=$(yabai -m query --windows --window "$window" | jq -re '."is-topmost"')
    floating=$(yabai -m query --windows --window "$window" | jq -re '."is-floating"')

    if $top; then
      if $floating; then
        continue
      fi
      yabai -m window "$window" --toggle topmost
    fi
  done
}

float_signal() {
  QUERY=$(yabai -m query --windows --window "$1" | jq -re '."is-topmost",."is-floating"')
  declare -a PROPERTIES
  PROPERTIES=("$QUERY")

  if ! $${PROPERTIES[0]} && $${PROPERTIES[1]}; then
    yabai -m window "$1" --toggle topmost
    echo 1 "$${PROPERTIES[0]}" "$${PROPERTIES[1]}"
  fi

  if $${PROPERTIES[0]} && ! $${PROPERTIES[1]}; then
    yabai -m window "$1" --toggle topmost
    echo 2 "$${PROPERTIES[0]}" "$${PROPERTIES[1]}"
  fi
}

set_layer() {
  QUERY=$(yabai -m query --windows --window "$1" | jq -re '."is-topmost",."is-floating"')
  declare -a PROPERTIES
  PROPERTIES=("$QUERY")

  if ! $${PROPERTIES[1]}; then
    yabai -m window "$YABAI_WINDOW_ID" --layer below
    return
  fi
  # yabai -m window $YABAI_WINDOW_ID --layer normal
}

auto_stack() {
  INSTANCES=$(yabai -m query --windows | jq "[.[] |select(.\"app\"==\"$1\")| .\"id\"]| length")
  if [[ $INSTANCES -eq 1 ]]; then
    return 0
  fi

  NEW_APP=$yabai_WINDOW_ID
  APP=$(yabai -m query --windows | jq "[.[] |select(.\"app\"==\"$1\" )|select(.\"id\"!=\"$NEW_APP\")][1].\"id\"")
  yabai -m window "$APP" --stack "$NEW_APP"
}
