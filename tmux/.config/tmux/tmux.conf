# ============================================= #
#
# ████████╗███╗   ███╗██╗   ██╗██╗  ██╗
# ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝
#    ██║   ██╔████╔██║██║   ██║ ╚███╔╝
#    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗
#    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗
#    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝
#
# Terminal multiplexer configuration optimized for:
# • Vim-like navigation and copy mode
# • Mouse-driven workflow with text selection
# • macOS integration via Ghostty terminal
# • Development-focused session management
#
# ============================================= #

# =====================================
# CORE BEHAVIOR
# =====================================

# Set default shell to zsh
set -g default-shell /bin/zsh
set -g default-command /bin/zsh

# Session management - prevent tmux exit when closing sessions
set -g detach-on-destroy off

# Window and pane indexing - start from 1 for easier keyboard access
set -g base-index 1
setw -g pane-base-index 1
set -g renumber-windows on

# Performance and responsiveness
set -s escape-time 0
set -g history-limit 50000
set -g status-interval 10

# Integration with external tools
set -g focus-events on
set -g allow-passthrough on
set -g set-clipboard on

# Environment variables for AWS tooling integration
set-option -g update-environment "AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_SECURITY_TOKEN AWS_PROFILE AWS_REGION AWS_DEFAULT_REGION ASSUME_CONFIG ASSUME_DEFAULT_DURATION ASSUME_DEFAULT_PROFILE ASSUME_DEFAULT_ROLE_ARN"

# Bell detection configuration
set-option -g monitor-bell on
set-option -g bell-action any
set-option -g visual-bell on

# Enhanced notification hook with process information
set-hook -g alert-bell 'run-shell "
  # Get process information from the pane that triggered the bell
  PANE_PID=#{pane_pid}
  PANE_CMD=\"$(tmux display-message -p -t #{pane_id} \"#{pane_current_command}\")\"
  PANE_PATH=\"$(tmux display-message -p -t #{pane_id} \"#{pane_current_path}\")\"
  SESSION=\"#{session_name}\"
  WINDOW=\"#{window_name}\"
  
  # Get the actual running process (not just shell)
  ACTIVE_CMD=\"$(ps -p $PANE_PID -o comm= 2>/dev/null || echo \"$PANE_CMD\")\"
  
  # Check if it'\''s Claude Code or similar
  if [[ \"$ACTIVE_CMD\" == *\"claude\"* ]] || [[ \"$PANE_CMD\" == *\"claude\"* ]]; then
    TITLE=\"Claude Code\"
    MESSAGE=\"Task completed or input required\"
    SUBTITLE=\"Session: $SESSION\"
  elif [[ \"$ACTIVE_CMD\" == *\"npm\"* ]] || [[ \"$ACTIVE_CMD\" == *\"yarn\"* ]] || [[ \"$ACTIVE_CMD\" == *\"pnpm\"* ]]; then
    TITLE=\"Build Process\"
    MESSAGE=\"Build task completed in $WINDOW\"
    SUBTITLE=\"Path: $(basename \"$PANE_PATH\")\"
  else
    TITLE=\"$ACTIVE_CMD\"
    MESSAGE=\"Process completed in $WINDOW\"
    SUBTITLE=\"Session: $SESSION\"
  fi
  
  # Send notification with context
  reattach-to-user-namespace terminal-notifier \
    -title \"$TITLE\" \
    -message \"$MESSAGE\" \
    -subtitle \"$SUBTITLE\" \
    -sound Ping \
    -group tmux-alerts \
    -sender com.apple.Terminal \
    -activate com.apple.Terminal
"'

# =====================================
# VISUAL AND DISPLAY
# =====================================

set -g default-terminal "tmux-256color"
set -g display-time 3000

# Pane borders - uniform subtle dark shade for all panes
set -g pane-active-border-style 'fg=#3c3836,bg=default'
set -g pane-border-style 'fg=#3c3836,bg=default'

# Copy mode visual styling
set-window-option -g mode-style 'fg=#eee8d5,bg=#073642'

# Disable window resize conflicts
setw -g aggressive-resize off

# =====================================
# MOUSE INTEGRATION
# =====================================

# Enable mouse for scrolling, selection, and pane interaction
set -g mouse on

# Mouse wheel behavior - enter copy mode on scroll up, natural scrolling
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# Enhanced mouse selection with clipboard integration
unbind -T copy-mode-vi MouseDragEnd1Pane
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"

# Double-click word selection
bind-key -n DoubleClick1Pane select-pane \; copy-mode -M \; send-keys -X select-word \; run-shell "sleep .5s" \; send-keys -X copy-pipe-and-cancel "pbcopy"

# Triple-click line selection
bind-key -n TripleClick1Pane select-pane \; copy-mode -M \; send-keys -X select-line \; run-shell "sleep .5s" \; send-keys -X copy-pipe-and-cancel "pbcopy"

# =====================================
# PANE AND WINDOW MANAGEMENT
# =====================================

# Window and pane creation - preserve current path
bind 'h' split-window -v -e -F -c "#{pane_current_path}"
bind 'v' split-window -h -e -F -c "#{pane_current_path}"
bind '"' split-window -v -e -F  -c "#{pane_current_path}"
bind '%' split-window -h -e -F -c "#{pane_current_path}"
bind c new-window -e -F -c '#{pane_current_path}'

# Pane navigation - Alt+arrow keys without prefix
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# Window navigation - Shift+arrow keys
bind -n S-Left  previous-window
bind -n S-Right next-window
bind -n M-H previous-window
bind -n M-L next-window

# Pane management shortcuts
bind-key -N "Kill current pane" x kill-pane
bind-key -N "Kill current window" & kill-window

# =====================================
# PANE RESIZING
# =====================================

# Simple resize with Option+Control+Plus/Minus (matching yabai style)
# Smart resize - detects pane orientation and resizes accordingly
bind -n M-C-= if-shell "[ #{pane_at_right} -eq 1 ]" \
    "resize-pane -L 5" \
    "if-shell \"[ #{pane_at_bottom} -eq 1 ]\" \"resize-pane -U 5\" \"resize-pane -R 5\""
    
bind -n M-C-- if-shell "[ #{pane_at_right} -eq 1 ]" \
    "resize-pane -R 5" \
    "if-shell \"[ #{pane_at_bottom} -eq 1 ]\" \"resize-pane -D 5\" \"resize-pane -L 5\""

# Alternative binding for keyboards where = requires shift
bind -n M-C-+ if-shell "[ #{pane_at_right} -eq 1 ]" \
    "resize-pane -L 5" \
    "if-shell \"[ #{pane_at_bottom} -eq 1 ]\" \"resize-pane -U 5\" \"resize-pane -R 5\""

# Directional resize with prefix + Option (repeatable with -r)
bind -r M-h resize-pane -L 5
bind -r M-j resize-pane -D 5
bind -r M-k resize-pane -U 5
bind -r M-l resize-pane -R 5

# Fine-grained resize (1 cell at a time)
bind -r < resize-pane -L 1
bind -r > resize-pane -R 1
bind -r - resize-pane -D 1
bind -r + resize-pane -U 1

# =====================================
# VIM-TMUX INTEGRATION
# =====================================

# Seamless navigation between vim and tmux panes
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"

bind-key -n 'C-h' if-shell "$is_vim" { send-keys C-h } { if-shell -F '#{pane_at_left}'   {} { select-pane -L } }
bind-key -n 'C-j' if-shell "$is_vim" { send-keys C-j } { if-shell -F '#{pane_at_bottom}' {} { select-pane -D } }
bind-key -n 'C-k' if-shell "$is_vim" { send-keys C-k } { if-shell -F '#{pane_at_top}'    {} { select-pane -U } }
bind-key -n 'C-l' if-shell "$is_vim" { send-keys C-l } { if-shell -F '#{pane_at_right}'  {} { select-pane -R } }

# Copy mode vim navigation
bind-key -T copy-mode-vi 'C-h' if-shell -F '#{pane_at_left}'   {} { select-pane -L }
bind-key -T copy-mode-vi 'C-j' if-shell -F '#{pane_at_bottom}' {} { select-pane -D }
bind-key -T copy-mode-vi 'C-k' if-shell -F '#{pane_at_top}'    {} { select-pane -U }
bind-key -T copy-mode-vi 'C-l' if-shell -F '#{pane_at_right}'  {} { select-pane -R }

# =====================================
# COPY MODE AND TEXT SELECTION
# =====================================

# Enable vi-style copy mode for vim-like text navigation
set-window-option -g mode-keys vi
set -g mode-keys vi

# Copy mode entry points
bind [ copy-mode
bind u copy-mode -u
bind Escape copy-mode
bind f copy-mode \; send-keys "/"

# Core selection and copy commands
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi Y send-keys -X copy-line
bind-key -T copy-mode-vi V send-keys -X select-line

# Vim-like cursor movement
bind-key -T copy-mode-vi h send-keys -X cursor-left
bind-key -T copy-mode-vi j send-keys -X cursor-down
bind-key -T copy-mode-vi k send-keys -X cursor-up
bind-key -T copy-mode-vi l send-keys -X cursor-right

# Word-wise movement
bind-key -T copy-mode-vi w send-keys -X next-word
bind-key -T copy-mode-vi b send-keys -X previous-word
bind-key -T copy-mode-vi e send-keys -X next-word-end
bind-key -T copy-mode-vi W send-keys -X next-word
bind-key -T copy-mode-vi B send-keys -X previous-word
bind-key -T copy-mode-vi E send-keys -X next-word-end

# Line navigation
bind-key -T copy-mode-vi 0 send-keys -X start-of-line
bind-key -T copy-mode-vi '^' send-keys -X back-to-indentation
bind-key -T copy-mode-vi '$' send-keys -X end-of-line

# Page and buffer navigation
bind-key -T copy-mode-vi C-f send-keys -X page-down
bind-key -T copy-mode-vi C-b send-keys -X page-up
bind-key -T copy-mode-vi C-d send-keys -X halfpage-down
bind-key -T copy-mode-vi C-u send-keys -X halfpage-up
bind-key -T copy-mode-vi g send-keys -X history-top
bind-key -T copy-mode-vi G send-keys -X history-bottom

# Search functionality
bind-key -T copy-mode-vi / send-keys -X search-forward
bind-key -T copy-mode-vi ? send-keys -X search-backward
bind-key -T copy-mode-vi n send-keys -X search-again
bind-key -T copy-mode-vi N send-keys -X search-reverse

# Advanced copy mode features
bind-key -T copy-mode-vi 'C-o' send-keys -X jump-back
bind-key -T copy-mode-vi 'C-i' send-keys -X jump-forward
bind-key -T copy-mode-vi '%' send-keys -X next-matching
bind-key -T copy-mode-vi "'" send-keys -X jump-to-mark
bind-key -T copy-mode-vi Escape send-keys -X cancel

# Select all text in buffer
bind-key -T copy-mode-vi A send-keys -X start-of-line \; send-keys -X begin-selection \; send-keys -X history-bottom \; send-keys -X cursor-left \; send-keys -X end-of-line

# Enhanced mouse wheel scrolling in copy mode
bind-key -T copy-mode-vi WheelUpPane send-keys -X -N 3 scroll-up
bind-key -T copy-mode-vi WheelDownPane send-keys -X -N 3 scroll-down

# =====================================
# SYSTEM CLIPBOARD INTEGRATION
# =====================================

# macOS clipboard integration
if-shell "command -v pbcopy" {
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
}

# Linux clipboard integration
if-shell "command -v xclip" {
    bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
    bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
}

# =====================================
# DEVELOPMENT WORKFLOW SHORTCUTS
# =====================================

# Session management with sesh
bind -N "Switch to last session" L run-shell "sesh last || tmux display-message -d 1000 'Only one session'"
bind -N "Switch to project root session" 9 run-shell "sesh connect --root $(pwd)"
bind -N "Kill current session" Q kill-session

# Development tools - open in new windows with custom names
bind -N "Open Lazydocker" d new-window -c "#{pane_current_path}" -n " " "lazydocker 2> /dev/null"
bind -N "Open Lazygit" g new-window -c "#{pane_current_path}" -n " " "lazygit 2> /dev/null"
bind -N "Open GitHub Dashboard" G new-window -c "#{pane_current_path}" -n " " "ghd 2> /dev/null"

# Development splits
bind -N "Development split" D split-window -v -l 10 dev
bind -N "Script runner" Y split-window -v -l 10 "bun run (jq -r '.scripts | keys[]' package.json | fzf --no-border)"

# Pane management
bind -N "Break pane to new window" B break-pane
bind -N "Join pane from window 1" J join-pane -t 1

# Quick buffer editing
bind-key e send-keys "tmux capture-pane -p -S - | nvim -c 'set buftype=nofile' +" Enter

# =====================================
# SESSION PICKER AND FUZZY FINDER
# =====================================

# Tmux sessionizer for quick project switching
bind-key "f" display-popup -E "tmux-sessionizer"

# Enhanced session picker with preview
bind-key "Z" display-popup -E "sesh connect \$(sesh list | zf --height 24)"

# Full-screen session picker with advanced controls
bind-key "K" run-shell "sesh connect \"$(
  sesh list --icons --hide-duplicates | fzf-tmux -p 100%,100% --no-border \
  --ansi \
  --list-border \
  --no-sort --prompt '⚡  ' \
  --color 'list-border:6,input-border:3,preview-border:4,header-bg:-1,header-border:6' \
  --input-border \
  --header-border \
  --bind 'tab:down,btab:up' \
  --bind 'ctrl-b:abort' \
  --bind 'ctrl-a:change-prompt(⚡  )+reload(sesh list --icons)' \
  --bind 'ctrl-t:change-prompt(  )+reload(sesh list -t --icons)' \
  --bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c --icons)' \
  --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z --icons)' \
  --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
  --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡  )+reload(sesh list --icons)' \
  --preview-window 'right:70%' \
  --preview 'sesh preview {}' \
)\""

# Root-focused session picker
bind-key "R" run-shell "sesh connect \"\$(
  sesh list --icons | fzf-tmux -p 100%,100% --no-border \
    --query  \"\$(sesh root)\" \
    --ansi \
    --list-border \
    --no-sort --prompt '⚡  ' \
    --color 'list-border:6,input-border:3,preview-border:4,header-bg:-1,header-border:6' \
    --input-border \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-b:abort' \
    --bind 'ctrl-t:change-prompt(🪟  )+reload(sesh list -t --icons)' \
    --bind 'ctrl-g:change-prompt(⚙️  )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(📁  )+reload(sesh list -z --icons)' \
    --bind 'ctrl-f:change-prompt(🔎  )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡  )+reload(sesh list --icons)' \
    --preview-window 'right:70%' \
    --preview 'sesh preview {}' \
)\""

# Compact session picker
bind-key "T" run-shell "sesh connect $(sesh list -tz | fzf-tmux -p 55%,60% \
  --no-sort --border-label ' sesh ' --prompt '⚡ ' \
  --header '  ^a all ^t tmux ^x zoxide ^f find' \
  --bind 'tab:down,btab:up' \
  --bind 'ctrl-a:change-prompt(⚡)+reload(sesh list)' \
  --bind 'ctrl-t:change-prompt( )+reload(sesh list -t)' \
  --bind 'ctrl-x:change-prompt( )+reload(sesh list -z)' \
  --bind 'ctrl-f:change-prompt( )+reload(fd -H -d 2 -t d -E .Trash . ~)' \
  --bind 'ctrl-d:execute(tmux kill-session -t {})+change-prompt(⚡  )+reload(sesh list)'
)"

# =====================================
# THEME AND STYLING
# =====================================

# Catppuccin theme configuration - macchiato flavor for dark mode
set -g @catppuccin_flavor "macchiato"
set -g @catppuccin_status_background "none"
set -g @catppuccin_window_status_style "basic"
set -g @catppuccin_pane_status_enabled "off"
set -g @catppuccin_pane_border_status "off"

# Status bar configuration - minimal and clean
set -ogq @catppuccin_status_left_separator "" 
set -g status-left-length 100
set -g status-left ""

set -ogq @catppuccin_status_middle_separator ""

set -ogq @catppuccin_status_right_separator ""
set -g status-right-length 100
set -g status-right ""
set -g status-right "#{E:@catppuccin_status_session}"

# Window status icons - minimal approach
set -ogq @catppuccin_icon_window_last "null"
set -ogq @catppuccin_icon_window_current "null"
set -ogq @catppuccin_icon_window_zoom ""
set -ogq @catppuccin_icon_window_mark "null"
set -ogq @catppuccin_icon_window_silent "null"
set -ogq @catppuccin_icon_window_activity "󰖲"
set -ogq @catppuccin_icon_window_bell "󰂞"

# Theme styling options
set -ogq @catppuccin_status_connect_separator "no"
set -ogq @catppuccin_status_fill "icon"
set -ogq @catppuccin_status_module_bg_color "#{@thm_surface_0}"

# Time and session display
set -ogq @catppuccin_date_time_text "%H:%M"
set -ogq @catppuccin_date_time_icon ""
set -ogq @catppuccin_session_icon ""
set -ogq @catppuccin_application_icon ""

# Window naming
set -g @catppuccin_window_default_text " #W"
set -g @catppuccin_window_current_text " #W"
set -g @catppuccin_window_text " #W"

# Window status bar styling - subtle differentiation for active window
set -g @catppuccin_window_default_background "#{@thm_bg}"      # Dark background for inactive windows
set -g @catppuccin_window_current_background "#{@thm_surface_1}"  # Subtle gray for active window

# =====================================
# PLUGIN MANAGEMENT
# =====================================

# Core plugins for enhanced functionality
set -g @plugin 'tmux-plugins/tmux-sensible'       # Sensible defaults
set -g @plugin 'tmux-plugins/tmux-yank'           # Enhanced clipboard integration
set -g @plugin 'christoomey/vim-tmux-navigator'   # Seamless vim-tmux navigation
set -g @plugin 'catppuccin/tmux'                  # Beautiful theme
set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'  # Smart window naming

# Plugin manager
set -g @plugin 'tmux-plugins/tpm'

# Plugin configuration
set -g @shell_mode 'vi'  # tmux-yank vi mode

# Auto-install TPM if not present
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize plugin manager (keep at bottom)
run '~/.tmux/plugins/tpm/tpm'

# =====================================
# POST-PLUGIN OVERRIDES
# =====================================

# Override pane borders after theme loads - uniform subtle color
set -g pane-active-border-style 'fg=#484848,bg=default'
set -g pane-border-style 'fg=#484848,bg=default'

# Override status bar styling after theme loads
set -g status-style 'bg=#181825,fg=#cdd6f4'

# Window status styling - subtle active window indication
setw -g window-status-style 'bg=#181825,fg=#6c7086'
setw -g window-status-current-style 'bg=#313244,fg=#cdd6f4'
setw -g window-status-format ' #I:#W '
setw -g window-status-current-format ' #I:#W '

# Auto-create initial session
new-session
